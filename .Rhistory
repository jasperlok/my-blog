fp_numIns <- ggplot(df_destination, aes(x = count_log, y = claim_ind)) +
geom_point(shape = 1, aes(text = sprintf(Destination))) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ll95_numIns)) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ul95_numIns)) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ll99_numIns), linetype = 2) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ul99_numIns), linetype = 2) +
geom_hline(data = dfCI_numIns, aes(yintercept = p_mean_numIns)) +
xlab("No of Insured by State") +
ylab("Proportion of Rob Claim Count")
ggplotly(fp_numIns)
p_mean_numIns <- sum(df_destination$claim_ind)/sum(df_destination$count)
cl_95 <- 1.96
cl_99 <- 2.58
n <- count(df_destination)
num_seq_numIns <- seq(min(df_destination$count_log), max(df_destination$count_log), 1000)
num_ll95_numIns <- p_mean_numIns - cl_95 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ul95_numIns <- p_mean_numIns + cl_95 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ll99_numIns <- p_mean_numIns - cl_99 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ul99_numIns <- p_mean_numIns + cl_99 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
dfCI_numIns <- data.frame(num_ll95_numIns, num_ul95_numIns, num_ll99_numIns, num_ul99_numIns, num_seq_numIns, p_mean_numIns)
fp_numIns <- ggplot(df_destination, aes(x = count_log, y = claim_ind)) +
geom_point(shape = 1, aes(text = sprintf(Destination))) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ll95_numIns)) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ul95_numIns)) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ll99_numIns), linetype = 2) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ul99_numIns), linetype = 2) +
geom_hline(data = dfCI_numIns, aes(yintercept = p_mean_numIns)) +
xlab("No of Insured by State") +
ylab("Proportion of Rob Claim Count")
ggplotly(fp_numIns)
df_destination <- df %>%
group_by(Destination) %>%
dplyr::filter(Destination != "Singapore") %>%
summarise(count = n(),
claim_ind = sum(Claim == "Yes")) %>%
mutate(claim_perc = claim_ind/count,
count_log = log(count + 1))
p_mean_numIns <- sum(df_destination$claim_ind)/sum(df_destination$count)
cl_95 <- 1.96
cl_99 <- 2.58
n <- count(df_destination)
num_seq_numIns <- seq(min(df_destination$count_log), max(df_destination$count_log), 1000)
num_ll95_numIns <- p_mean_numIns - cl_95 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ul95_numIns <- p_mean_numIns + cl_95 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ll99_numIns <- p_mean_numIns - cl_99 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ul99_numIns <- p_mean_numIns + cl_99 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
dfCI_numIns <- data.frame(num_ll95_numIns, num_ul95_numIns, num_ll99_numIns, num_ul99_numIns, num_seq_numIns, p_mean_numIns)
fp_numIns <- ggplot(df_destination, aes(x = count_log, y = claim_ind)) +
geom_point(shape = 1, aes(text = sprintf(Destination))) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ll95_numIns)) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ul95_numIns)) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ll99_numIns), linetype = 2) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ul99_numIns), linetype = 2) +
geom_hline(data = dfCI_numIns, aes(yintercept = p_mean_numIns)) +
xlab("No of Insured by State") +
ylab("Proportion of Rob Claim Count")
ggplotly(fp_numIns)
df_destination <- df %>%
group_by(Destination) %>%
dplyr::filter(Destination != "SINGAPORE") %>%
summarise(count = n(),
claim_ind = sum(Claim == "Yes")) %>%
mutate(claim_perc = claim_ind/count,
count_log = log(count + 1))
p_mean_numIns <- sum(df_destination$claim_ind)/sum(df_destination$count)
cl_95 <- 1.96
cl_99 <- 2.58
n <- count(df_destination)
num_seq_numIns <- seq(min(df_destination$count_log), max(df_destination$count_log), 1000)
num_ll95_numIns <- p_mean_numIns - cl_95 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ul95_numIns <- p_mean_numIns + cl_95 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ll99_numIns <- p_mean_numIns - cl_99 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ul99_numIns <- p_mean_numIns + cl_99 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
dfCI_numIns <- data.frame(num_ll95_numIns, num_ul95_numIns, num_ll99_numIns, num_ul99_numIns, num_seq_numIns, p_mean_numIns)
fp_numIns <- ggplot(df_destination, aes(x = count_log, y = claim_ind)) +
geom_point(shape = 1, aes(text = sprintf(Destination))) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ll95_numIns)) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ul95_numIns)) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ll99_numIns), linetype = 2) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ul99_numIns), linetype = 2) +
geom_hline(data = dfCI_numIns, aes(yintercept = p_mean_numIns)) +
xlab("No of Insured by State") +
ylab("Proportion of Rob Claim Count")
ggplotly(fp_numIns)
fp_numIns <-
df_destination %>%
dplyr::filter(claim_ind > 0) %>%
ggplot(aes(x = count_log, y = claim_ind)) +
geom_point(shape = 1, aes(text = sprintf(Destination))) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ll95_numIns)) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ul95_numIns)) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ll99_numIns), linetype = 2) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ul99_numIns), linetype = 2) +
geom_hline(data = dfCI_numIns, aes(yintercept = p_mean_numIns)) +
xlab("No of Insured by State") +
ylab("Proportion of Rob Claim Count")
ggplotly(fp_numIns)
p_mean_numIns <- sum(df_destination$claim_ind)/sum(df_destination$count)
cl_95 <- 1.96
cl_99 <- 2.58
n <- count(df_destination)
num_seq_numIns <- seq(min(df_destination$count_log), max(df_destination$count_log), 10)
num_ll95_numIns <- p_mean_numIns - cl_95 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ul95_numIns <- p_mean_numIns + cl_95 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ll99_numIns <- p_mean_numIns - cl_99 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ul99_numIns <- p_mean_numIns + cl_99 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
dfCI_numIns <- data.frame(num_ll95_numIns, num_ul95_numIns, num_ll99_numIns, num_ul99_numIns, num_seq_numIns, p_mean_numIns)
fp_numIns <-
df_destination %>%
dplyr::filter(claim_ind > 0) %>%
ggplot(aes(x = count_log, y = claim_ind)) +
geom_point(shape = 1, aes(text = sprintf(Destination))) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ll95_numIns)) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ul95_numIns)) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ll99_numIns), linetype = 2) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ul99_numIns), linetype = 2) +
geom_hline(data = dfCI_numIns, aes(yintercept = p_mean_numIns)) +
xlab("No of Insured by State") +
ylab("Proportion of Rob Claim Count")
ggplotly(fp_numIns)
p_mean_numIns <- sum(df_destination$claim_ind)/sum(df_destination$count)
cl_95 <- 1.96
cl_99 <- 2.58
n <- count(df_destination)
num_seq_numIns <- seq(min(df_destination$count), max(df_destination$count), 10)
num_ll95_numIns <- p_mean_numIns - cl_95 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ul95_numIns <- p_mean_numIns + cl_95 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ll99_numIns <- p_mean_numIns - cl_99 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ul99_numIns <- p_mean_numIns + cl_99 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
dfCI_numIns <- data.frame(num_ll95_numIns, num_ul95_numIns, num_ll99_numIns, num_ul99_numIns, num_seq_numIns, p_mean_numIns)
fp_numIns <-
df_destination %>%
dplyr::filter(claim_ind > 0) %>%
ggplot(aes(x = count, y = claim_ind)) +
geom_point(shape = 1, aes(text = sprintf(Destination))) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ll95_numIns)) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ul95_numIns)) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ll99_numIns), linetype = 2) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ul99_numIns), linetype = 2) +
geom_hline(data = dfCI_numIns, aes(yintercept = p_mean_numIns)) +
xlab("No of Insured by State") +
ylab("Proportion of Rob Claim Count")
ggplotly(fp_numIns)
unique(df$Destination)
destination_state <- as.data.frame(unique(df$Destination))
View(destination_state)
destination_state <- as.data.frame(unique(df$Destination)) %>%
rename('Destination' = 'unique(df$Destination)')
View(destination_state)
packages <- c('tidyverse', 'readr', 'skimr', 'tidymodels', 'discrim', 'naivebayes', 'glmnet', 'tictoc', 'vip', 'shapr', 'DALEXtra', 'funModeling', 'plotly', 'readxl')
for(p in packages){
if(!require (p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
destination_state <- read_excel("data/Destination_Continent_Mapping.xlsx")
View(destination_state)
destination_state <- read_excel("data/Destination_Continent_Mapping.xlsx")
df <- df %>%
left_join(destination_state, by = c("Destination" = "Destination"))
View(df)
df_destination <- df %>%
group_by(Continent) %>%
summarise(count = n(),
claim_ind = sum(Claim == "Yes")) %>%
mutate(claim_perc = claim_ind/count,
count_log = log(count + 1))
View(df_destination)
p_mean_numIns <- sum(df_destination$claim_ind)/sum(df_destination$count)
cl_95 <- 1.96
cl_99 <- 2.58
n <- count(df_destination)
num_seq_numIns <- seq(min(df_destination$count), max(df_destination$count), 10)
num_ll95_numIns <- p_mean_numIns - cl_95 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ul95_numIns <- p_mean_numIns + cl_95 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ll99_numIns <- p_mean_numIns - cl_99 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
num_ul99_numIns <- p_mean_numIns + cl_99 * sqrt((p_mean_numIns * (1 - p_mean_numIns))/num_seq_numIns)
dfCI_numIns <- data.frame(num_ll95_numIns, num_ul95_numIns, num_ll99_numIns, num_ul99_numIns, num_seq_numIns, p_mean_numIns)
fp_numIns <-
df_destination %>%
dplyr::filter(claim_ind > 0) %>%
ggplot(aes(x = count, y = claim_ind)) +
geom_point(shape = 1, aes(text = sprintf(Continent))) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ll95_numIns)) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ul95_numIns)) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ll99_numIns), linetype = 2) +
geom_line(data = dfCI_numIns, aes(x = num_seq_numIns, y = num_ul99_numIns), linetype = 2) +
geom_hline(data = dfCI_numIns, aes(yintercept = p_mean_numIns)) +
xlab("No of Insured by State") +
ylab("Proportion of Rob Claim Count")
ggplotly(fp_numIns)
packages <- c('tidyverse', 'readr', 'skimr', 'tidymodels', 'discrim', 'naivebayes', 'glmnet', 'tictoc', 'vip', 'shapr', 'DALEXtra', 'funModeling', 'plotly', 'readxl', 'ggmosaic')
for(p in packages){
if(!require (p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
ggplot(df, aes(x = State, y = Claim)) +
geom_mosaic(aes(x = product(Claim, State), fill = Claim), na.rm = TRUE)
ggplot(df, aes(x = Continent, y = Claim)) +
geom_mosaic(aes(x = product(Claim, Continent), fill = Claim), na.rm = TRUE)
df <- read_csv("data/travel insurance.csv") %>%
rename("Commission" = "Commision (in value)") %>%
mutate(Claim = factor(Claim, levels = c("Yes", "No"))
df <- read_csv("data/travel insurance.csv") %>%
rename("Commission" = "Commision (in value)") %>%
mutate(Claim = factor(Claim, levels = c("Yes", "No")))
skim(df)
destination_state <- read_excel("data/Destination_Continent_Mapping.xlsx")
df <- df %>%
left_join(destination_state, by = c("Destination" = "Destination"))
ggplot(df, aes(x = Continent, y = Claim)) +
geom_mosaic(aes(x = product(Claim, Continent), fill = Claim), na.rm = TRUE)
ggplot(df, aes(x = Continent, y = Claim)) +
geom_mosaic(aes(x = product(Claim, Continent), fill = Claim), na.rm = TRUE) +
theme(axis.text.x = element_text(angle = 90))
ggplot(df, aes(x = Continent, color = Claim)) +
geom_bar(position = "fill")
ggplot(df, aes(x = Continent, fill = Claim)) +
geom_bar(position = "fill")
names(df)
ggplot(df, aes(x = `Distribution Channel`, fill = Claim)) +
geom_bar(position = "fill")
ggplot(df, aes(x = `Distribution Channel`, fill = Claim)) +
geom_mosaic(aes(x = product(Claim, `Distribution Channel`), fill = Claim), na.rm = TRUE) +
theme(axis.text.x = element_text(angle = 90))
ggplot(df, aes(x = `Distribution Channel`, fill = Claim)) +
geom_mosaic(aes(x = product(Claim, "Distribution Channel"), fill = Claim), na.rm = TRUE) +
theme(axis.text.x = element_text(angle = 90))
ggplot(df, aes(x = `Distribution Channel`, fill = Claim)) +
geom_mosaic(aes(x = product(Claim, "Distribution Channel"), fill = Claim), na.rm = TRUE) #+
ggplot(df, aes(x = `Agency Type`, fill = Claim)) +
geom_mosaic(aes(x = product(Claim, `Agency Type`), fill = Claim), na.rm = TRUE) #+
ggplot(df, aes(x = `Agency Type`, fill = Claim)) +
geom_mosaic(aes(x = product(Claim, `Agency Type`), fill = Claim), na.rm = TRUE) #+
#  theme(axis.text.x = element_text(angle = 90))
ggplot(df, aes(x = `Continent`, fill = Claim)) +
geom_mosaic(aes(x = product(Claim, `Continent`), fill = Claim), na.rm = TRUE) #+
ggplot(df, aes(x = `Continent`, fill = Claim)) +
geom_mosaic(aes(x = product(Claim, `Continent`), fill = Claim), na.rm = TRUE) +
theme(axis.text.x = element_text(angle = 90))
View(df)
names(df)
ggplot(df, aes(x = `Product Name`, fill = Claim)) +
geom_mosaic(aes(x = product(Claim, `Product Name`), fill = Claim), na.rm = TRUE) +
theme(axis.text.x = element_text(angle = 90))
ggplot(df, aes(x = `Product Name`, fill = Claim)) +
geom_mosaic(aes(x = product(Claim, `Product Name`), fill = Claim)) +
theme(axis.text.x = element_text(angle = 90))
ggplot(df, aes(`Product Name`, fill = Claim)) +
geom_mosaic(aes(x = product(Claim, `Product Name`), fill = Claim), na.rm = TRUE) +
theme(axis.text.x = element_text(angle = 90))
ggplot(df, aes(`Product Name`)) +
geom_mosaic(aes(x = product(Claim, `Product Name`), fill = Claim), na.rm = TRUE) +
theme(axis.text.x = element_text(angle = 90))
ggplot(df, aes(x = `Product Name`, fill = Claim)) +
geom_bar(position = "fill") +
#  geom_mosaic(aes(x = product(Claim, `Product Name`), fill = Claim), na.rm = TRUE) +
theme(axis.text.x = element_text(angle = 90))
ggplot(df, aes(x = "Product Name", y = Claim)) +
geom_mosaic(aes(x = product(Claim, "Product Name"), fill = Claim)) +
theme(axis.text.x = element_text(angle = 90))
ggplot(df, aes(x = `Product Name`, y = Claim)) +
geom_mosaic(aes(x = product(Claim, `Product Name`), fill = Claim)) +
theme(axis.text.x = element_text(angle = 90))
df_1 <- df %>%
select(-c(Gender)) %>%
rename_with(~gsub(" ", "_", .x, fixed = TRUE))
ggplot(df_1, aes(x = Product_Name, y = Claim)) +
geom_mosaic(aes(x = product(Claim, Product_Name), fill = Claim)) +
theme(axis.text.x = element_text(angle = 90))
4881/3656
4881/365
740/365
ggplot(df, aes(x = Product_Name, y = Duration)) +
geom_density()
ggplot(df_1, aes(x = Product_Name, y = Duration)) +
geom_density()
ggplot(df_1, aes(Duration, color = Product_Name)) +
geom_density()
df_1 %>% group_bv(Product_Name) %>% tally()
df_1 %>% group_by(Product_Name) %>% tally()
df_prod <- df %>%
group_by(`Product Name`) %>%
tally()
View(df_prod)
df_prod <- df %>%
group_by(`Product Name`) %>%
summarise(count = n(),
claim_ind = sum(Claim == "Yes")) %>%
mutate(claim_perc = claim_ind/count)
740/52
df_prod <- df %>%
group_by(`Product Name`) %>%
summarise(count = n(),
claim_ind = sum(Claim == "Yes")) %>%
mutate(claim_perc = claim_ind/count) %>%
arrange(desc(claim_perc))
df_prod <- df %>%
group_by(`Product Name`) %>%
summarise(count = n(),
claim_ind = sum(Claim == "Yes")) %>%
mutate(claim_perc = claim_ind/count) %>%
arrange(desc(claim_ind))
View(df_prod)
df_prod <- df %>%
group_by(`Product Name`) %>%
summarise(count = n(),
claim_ind = sum(Claim == "Yes")) %>%
mutate(claim_perc = claim_ind/count) %>%
arrange(desc(count))
df_prod <- df %>%
group_by(`Product Name`) %>%
summarise(count = n(),
claim_ind = sum(Claim == "Yes")) %>%
mutate(claim_perc = claim_ind/count) %>%
arrange(desc(count)) %>%
mutate(claim_cum_perc = cumsum(count)/sum(count))
df_prod <- df %>%
group_by(`Product Name`) %>%
summarise(count = n(),
claim_ind = sum(Claim == "Yes")) %>%
mutate(claim_perc = claim_ind/count) %>%
arrange(desc(count)) %>%
mutate(claim_cum_perc = cumsum(count)/sum(count),
product_name_recoded = case_when(claim_cum_perc > 0.9 ~ "Others",
TRUE ~ as.character(x)))
df_prod <- df %>%
group_by(`Product Name`) %>%
summarise(count = n(),
claim_ind = sum(Claim == "Yes")) %>%
mutate(claim_perc = claim_ind/count) %>%
arrange(desc(count)) %>%
mutate(claim_cum_perc = cumsum(count)/sum(count),
product_name_recoded = case_when(claim_cum_perc > 0.9 ~ "Others",
TRUE ~ as.character(`Product Name`)))
df_prod <- df %>%
group_by(`Product Name`) %>%
summarise(count = n(),
claim_ind = sum(Claim == "Yes")) %>%
mutate(claim_perc = claim_ind/count) %>%
arrange(desc(count)) %>%
mutate(claim_cum_perc = cumsum(count)/sum(count),
product_name_recoded = case_when(claim_cum_perc > 0.9 ~ "Others",
TRUE ~ as.character(`Product Name`))) %>%
select(-c("Product Name", "claim_cum_perc", "claim_ind", "count"))
df_prod <- df %>%
group_by(`Product Name`) %>%
summarise(count = n(),
claim_ind = sum(Claim == "Yes")) %>%
mutate(claim_perc = claim_ind/count) %>%
arrange(desc(count)) %>%
mutate(claim_cum_perc = cumsum(count)/sum(count),
product_name_recoded = case_when(claim_cum_perc > 0.9 ~ "Others",
TRUE ~ as.character(`Product Name`))) %>%
select(-c("claim_perc", "claim_cum_perc", "claim_ind", "count"))
df <- df %>%
left_join(df_prod, by = c("Product Name" = "Product Name"))
ggplot(df, aes(Duration, color = product_name_recoded)) +
geom_density()
ggplot(df, aes(Duration, fill = product_name_recoded)) +
geom_density()
ggplot(df, aes(Duration, color = product_name_recoded)) +
geom_density()
ggplot(df, aes(Duration, color = product_name_recoded)) +
geom_density(alpha = 0.2)
ggplot(df, aes(Duration, color = Claim)) +
geom_density(alpha = 0.2) +
facet_wrap(~product_name_recoded)
ggplot(df, aes(Duration)) +
geom_density()
df %>%
filter(Duration < 1000) %>%
ggplot(aes(Duration, color = Claim)) +
geom_density(alpha = 0.2) +
facet_wrap(~product_name_recoded)
df %>%
filter(Duration < 1000) %>%
ggplot(aes(Duration, color = Claim)) +
geom_density(position = "fill") +
facet_wrap(~product_name_recoded)
df %>%
filter(Duration < 1000) %>%
ggplot(aes(Duration, fill = Claim)) +
geom_density(position = "fill") +
facet_wrap(~product_name_recoded)
df %>%
filter(Duration < 1000) %>%
ggplot(aes(Duration, color = Claim)) +
geom_density(alpha = 0.3) +
facet_wrap(~product_name_recoded)
df %>%
filter(Duration < 1000) %>%
ggplot(aes(Duration, color = Claim)) +
geom_density(alpha = 0.3) +
geom_vline(data = df, aes(xintercept = Duration, colour = claim), linetype="dashed", size = 0.5)
df %>%
filter(Duration < 1000) %>%
ggplot(aes(Duration, color = Claim)) +
geom_density(alpha = 0.3) +
geom_vline(data = df, aes(xintercept = Duration, colour = Claim), linetype="dashed", size = 0.5)
df %>%
filter(Duration < 1000) %>%
ggplot(aes(Duration, color = Claim)) +
geom_density(alpha = 0.3) +
facet_wrap(~product_name_recoded) +
geom_vline(data = df, aes(xintercept = Duration, colour = Claim), linetype="dashed", size = 0.5)
df %>%
filter(Duration < 1000) %>%
ggplot(aes(x = product_name_recoded, y = Duration)) +
geom_boxplot() +
facet_wrap(~Claim)
df %>%
filter(Duration < 1000) %>%
ggplot(aes(x = Claim, y = Duration)) +
geom_boxplot() +
facet_wrap(~product_name_recoded)
df %>%
filter(Duration < 1000) %>%
ggplot(aes(x = Claim, y = log(Duration + 1))) +
geom_boxplot() +
facet_wrap(~product_name_recoded)
df %>%
filter(Duration < 1000) %>%
ggplot(aes(x = log(Duration + 1), color = Claim)) +
geom_density(alpha = 0.2)
df %>%
filter(Duration < 1000) %>%
ggplot(aes(x = Duration, color = Claim)) +
geom_density(alpha = 0.2)
log(
df %>%
filter(Duration < 1000) %>%
ggplot(aes(x = log(Duration + 1), color = Claim)) +
geom_density(alpha = 0.2)
df %>%
filter(Duration < 1000) %>%
ggplot(aes(x = log(Duration + 1), color = Claim)) +
geom_density(alpha = 0.2)
df %>%
filter(Duration < 1000) %>%
ggplot(aes(x = log(Duration + 1), color = Claim)) +
geom_density(alpha = 0.2) +
geom_vline(data = df, aes(xintercept = log(Duration + 1), colour = Claim), linetype="dashed", size=0.5)
df_prod <- df %>%
group_by(`Product Name`) %>%
summarise(count = n(),
claim_ind = sum(Claim == "Yes")) %>%
mutate(claim_perc = claim_ind/count) %>%
arrange(desc(count)) %>%
mutate(claim_cum_perc = cumsum(count)/sum(count),
product_name_recoded = case_when(claim_cum_perc > 0.9 ~ "Others",
TRUE ~ as.character(`Product Name`))) %>%
select(-c("claim_perc", "claim_cum_perc", "claim_ind", "count")) %>%
ungroup()
df <- df %>%
left_join(df_prod, by = c("Product Name" = "Product Name"))
options(htmltools.dir.version = FALSE)
packages <- c("captioner", "knitr")
for (p in packages){
if(!require (p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
knitr::opts_chunk$set(fig.retina = 3,
echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
out.width="80%")
library(captioner)
knitr::include_graphics("image/balance.jpg")
knitr::include_graphics("image/travel.jpg")
packages <- c('tidyverse', 'readr', 'skimr', 'tidymodels', 'discrim', 'naivebayes', 'glmnet', 'tictoc', 'vip', 'shapr', 'DALEXtra', 'funModeling', 'plotly', 'readxl', 'ggmosaic')
for(p in packages){
if(!require (p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
library('doParallel')
registerDoParallel() #as many physical cores as available.
df <- read_csv("data/travel insurance.csv") %>%
rename("Commission" = "Commision (in value)") %>%
mutate(Claim = factor(Claim, levels = c("Yes", "No")))
skim(df)
destination_state <- read_excel("data/Destination_Continent_Mapping.xlsx")
df <- df %>%
left_join(destination_state, by = c("Destination" = "Destination"))
df_destination <- df %>%
group_by(Continent) %>%
summarise(count = n(),
claim_ind = sum(Claim == "Yes")) %>%
mutate(claim_perc = claim_ind/count,
count_log = log(count + 1))
df_prod <- df %>%
group_by(`Product Name`) %>%
summarise(count = n(),
claim_ind = sum(Claim == "Yes")) %>%
mutate(claim_perc = claim_ind/count) %>%
arrange(desc(count)) %>%
mutate(claim_cum_perc = cumsum(count)/sum(count),
product_name_recoded = case_when(claim_cum_perc > 0.9 ~ "Others",
TRUE ~ as.character(`Product Name`))) %>%
select(-c("claim_perc", "claim_cum_perc", "claim_ind", "count")) %>%
ungroup()
df <- df %>%
left_join(df_prod, by = c("Product Name" = "Product Name"))
knitr::include_graphics("image/fake_news.jpg")
