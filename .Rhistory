annotate("text", x = 20, y = 0.09, label = "Claim Policies") +
geom_vline(data = age_mean_Noclaim, aes(xintercept = age_mean_Noclaim), linetype="solid", size=0.5) +
annotate("text", x = 68, y = 0.15, label = "Average Age - No Claim Policies") +
labs(title = "Density of Sales between Claim and No Claim Policies")
age_mean_claim <- df %>%
filter(Claim == "Yes") %>%
summarise(age_mean_claim = mean(Age))
age_mean_Noclaim <- df %>%
filter(Claim == "No") %>%
summarise(age_mean_Noclaim = mean(Age))
df %>%
ggplot(aes(Age, color = Claim)) +
geom_density() +
geom_vline(data = age_mean_claim, aes(xintercept = age_mean_claim), linetype="dashed", size=0.5) +
annotate("text", x = 20, y = 0.1, label = "Average Age - ") +
annotate("text", x = 20, y = 0.085, label = "Claim Policies") +
geom_vline(data = age_mean_Noclaim, aes(xintercept = age_mean_Noclaim), linetype="solid", size=0.5) +
annotate("text", x = 68, y = 0.15, label = "Average Age - No Claim Policies") +
labs(title = "Density of Sales between Claim and No Claim Policies")
age_mean_claim <- df %>%
filter(Claim == "Yes") %>%
summarise(age_mean_claim = mean(Age))
age_mean_Noclaim <- df %>%
filter(Claim == "No") %>%
summarise(age_mean_Noclaim = mean(Age))
df %>%
ggplot(aes(Age, color = Claim)) +
geom_density() +
geom_vline(data = age_mean_claim, aes(xintercept = age_mean_claim), linetype="dashed", size=0.5) +
annotate("text", x = 20, y = 0.1, label = "Average Age - ") +
annotate("text", x = 20, y = 0.088, label = "Claim Policies") +
geom_vline(data = age_mean_Noclaim, aes(xintercept = age_mean_Noclaim), linetype="solid", size=0.5) +
annotate("text", x = 68, y = 0.15, label = "Average Age - No Claim Policies") +
labs(title = "Density of Sales between Claim and No Claim Policies")
age_mean_claim <- df %>%
filter(Claim == "Yes") %>%
summarise(age_mean_claim = mean(Age))
age_mean_Noclaim <- df %>%
filter(Claim == "No") %>%
summarise(age_mean_Noclaim = mean(Age))
df %>%
ggplot(aes(Age, color = Claim)) +
geom_density() +
geom_vline(data = age_mean_claim, aes(xintercept = age_mean_claim), linetype="dashed", size=0.5) +
annotate("text", x = 20, y = 0.1, label = "Average Age - ") +
annotate("text", x = 20, y = 0.088, label = "Claim Policies") +
geom_vline(data = age_mean_Noclaim, aes(xintercept = age_mean_Noclaim), linetype="solid", size=0.5) +
annotate("text", x = 68, y = 0.15, label = "Average Age - No Claim Policies") +
labs(title = "Density of Age between Claim and No Claim Policies")
comm_mean_claim <- df %>%
filter(Claim == "Yes") %>%
summarise(comm_mean_claim = mean(Commission))
comm_mean_Noclaim <- df %>%
filter(Claim == "No") %>%
summarise(comm_mean_Noclaim = mean(Commission))
df %>%
ggplot(aes(Commission, color = Claim)) +
geom_density() +
geom_vline(data = comm_mean_claim, aes(xintercept = comm_mean_claim), linetype="dashed", size=0.5) +
annotate("text", x = 20, y = 0.1, label = "Average Age - ") +
annotate("text", x = 20, y = 0.088, label = "Claim Policies") +
geom_vline(data = comm_mean_Noclaim, aes(xintercept = comm_mean_Noclaim), linetype="solid", size=0.5) +
annotate("text", x = 68, y = 0.15, label = "Average Age - No Claim Policies") +
labs(title = "Density of Sales between Claim and No Claim Policies")
comm_mean_claim <- df %>%
filter(Claim == "Yes") %>%
summarise(comm_mean_claim = mean(Commission))
comm_mean_Noclaim <- df %>%
filter(Claim == "No") %>%
summarise(comm_mean_Noclaim = mean(Commission))
df %>%
ggplot(aes(Commission, color = Claim)) +
geom_density() +
geom_vline(data = comm_mean_claim, aes(xintercept = comm_mean_claim), linetype="dashed", size=0.5) +
annotate("text", x = 60, y = 0.1, label = "Average Commission - Claim Policies") +
geom_vline(data = comm_mean_Noclaim, aes(xintercept = comm_mean_Noclaim), linetype="solid", size=0.5) +
annotate("text", x = 80, y = 0.15, label = "Average Commission - No Claim Policies") +
labs(title = "Density of Sales between Claim and No Claim Policies")
comm_mean_claim <- df %>%
filter(Claim == "Yes") %>%
summarise(comm_mean_claim = mean(Commission))
comm_mean_Noclaim <- df %>%
filter(Claim == "No") %>%
summarise(comm_mean_Noclaim = mean(Commission))
df %>%
ggplot(aes(Commission, color = Claim)) +
geom_density() +
geom_vline(data = comm_mean_claim, aes(xintercept = comm_mean_claim), linetype="dashed", size=0.5) +
annotate("text", x = 70, y = 0.1, label = "Average Commission - Claim Policies") +
geom_vline(data = comm_mean_Noclaim, aes(xintercept = comm_mean_Noclaim), linetype="solid", size=0.5) +
annotate("text", x = 100, y = 0.15, label = "Average Commission - No Claim Policies") +
labs(title = "Density of Sales between Claim and No Claim Policies")
comm_mean_claim <- df %>%
filter(Claim == "Yes") %>%
summarise(comm_mean_claim = mean(Commission))
comm_mean_Noclaim <- df %>%
filter(Claim == "No") %>%
summarise(comm_mean_Noclaim = mean(Commission))
df %>%
ggplot(aes(Commission, color = Claim)) +
geom_density() +
geom_vline(data = comm_mean_claim, aes(xintercept = comm_mean_claim), linetype="dashed", size=0.5) +
annotate("text", x = 80, y = 0.1, label = "Average Commission - Claim Policies") +
geom_vline(data = comm_mean_Noclaim, aes(xintercept = comm_mean_Noclaim), linetype="solid", size=0.5) +
annotate("text", x = 100, y = 0.15, label = "Average Commission - No Claim Policies") +
labs(title = "Density of Sales between Claim and No Claim Policies")
df %>%
group_by(Continent, Claim) %>%
summarise(count = n())
df %>%
group_by(Continent, Claim) %>%
summarise(count = n()) %>%
pivot_wider(names_from = Claim, values_from = count)
df %>%
group_by(Continent, Claim) %>%
summarise(count = n()) %>%
pivot_wider(names_from = Claim, names_prefix = "Claim_", values_from = count)
df %>%
group_by(Continent, Claim) %>%
summarise(count = n()) %>%
pivot_wider(names_from = Claim, names_prefix = "Claim_", values_from = count) %>%
mutate(total = Claim_No + Claim_Yes,
Claim_perc = Claim_Yes / total)
df %>%
group_by(Continent, Claim) %>%
summarise(count = n()) %>%
pivot_wider(names_from = Claim, names_prefix = "Claim_", values_from = count) %>%
mutate(total = Claim_No + Claim_Yes,
Claim_perc = Claim_Yes / total * 100)
ggplot(df, aes(x = `Product Name`, fill = Claim)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90))
df %>%
group_by(product_name_recoded, Claim) %>%
summarise(count = n()) %>%
pivot_wider(names_from = Claim, names_prefix = "Claim_", values_from = count) %>%
mutate(total = Claim_No + Claim_Yes,
Claim_perc = Claim_Yes / total * 100)
ggplot(df, aes(Continent, fill = Claim)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90))
ggplot(df, aes(Continent, fill = Claim)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Claim Proportion by Continents")
ggplot(df, aes(x = `Product Name`, fill = Claim)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Claim Proportion by Product Name")
df %>%
filter(Duration < 1000) %>%
ggplot(aes(product_name_recoded, fill = Claim)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Claim Proportion of Product Name Recoded")
options(htmltools.dir.version = FALSE)
packages <- c("captioner", "knitr")
for (p in packages){
if(!require (p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
knitr::opts_chunk$set(fig.retina = 3,
echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
out.width="80%")
library(captioner)
knitr::include_graphics("image/balance.jpg")
knitr::include_graphics("image/travel.jpg")
packages <- c('tidyverse', 'readr', 'skimr', 'tidymodels', 'discrim',
'naivebayes', 'glmnet', 'tictoc', 'vip', 'shapr',
'DALEXtra', 'funModeling', 'plotly', 'readxl', 'ggmosaic')
for(p in packages){
if(!require (p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
library('doParallel')
registerDoParallel() #as many physical cores as available.
df <- read_csv("data/travel insurance.csv") %>%
rename("Commission" = "Commision (in value)") %>%
sample_frac(0.2)
skim(df)
destination_state <- read_excel("data/Destination_Continent_Mapping.xlsx")
df <- df %>%
left_join(destination_state, by = c("Destination" = "Destination"))
ggplot(df, aes(Continent, fill = Claim)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Claim Proportion by Continents")
df %>%
group_by(Continent, Claim) %>%
summarise(count = n()) %>%
pivot_wider(names_from = Claim, names_prefix = "Claim_", values_from = count) %>%
mutate(total = Claim_No + Claim_Yes,
Claim_perc = Claim_Yes / total * 100)
ggplot(df, aes(x = `Product Name`, fill = Claim)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Claim Proportion by Product Name")
df_prod <- df %>%
group_by(`Product Name`) %>%
summarise(count = n(),
claim_ind = sum(Claim == "Yes")) %>%
mutate(claim_perc = claim_ind/count) %>%
arrange(desc(count)) %>%
mutate(claim_cum_perc = cumsum(count)/sum(count),
product_name_recoded = case_when(claim_cum_perc > 0.9 ~ "Others",
TRUE ~ as.character(`Product Name`))) %>%
select(-c("claim_perc", "claim_cum_perc", "claim_ind", "count")) %>%
ungroup()
df <- df %>%
left_join(df_prod, by = c("Product Name" = "Product Name"))
df %>%
filter(Duration < 1000) %>%
ggplot(aes(product_name_recoded, fill = Claim)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Claim Proportion of Product Name Recoded")
duration_mean <- df %>%
summarise(duration_mean = mean(Duration))
ggplot(df, aes(Duration)) +
geom_density() +
geom_vline(data = duration_mean, aes(xintercept = duration_mean), linetype="dashed", size=0.5) +
annotate("text", x = 800, y = 0.025, label = paste0("Mean of Duration: ", round(duration_mean$duration_mean, 2))) +
labs(title = "Density of Duration")
duration_mean_claim <- df %>%
filter(Duration < 1000, Claim == "Yes") %>%
summarise(mean_dur = mean(Duration),
mean_dur_log = log(mean_dur + 1))
duration_mean_Noclaim <- df %>%
filter(Duration < 1000, Claim == "No") %>%
summarise(mean_dur = mean(Duration),
mean_dur_log = log(mean_dur + 1))
df %>%
filter(Duration < 1000) %>%
ggplot(aes(x = log(Duration + 1), color = Claim)) +
geom_density(alpha = 0.2) +
geom_vline(data = duration_mean_claim, aes(xintercept = mean_dur_log), linetype="dashed", size=0.5) +
annotate("text", x = 5.65, y = 0.32, label = "Average Duration - ") +
annotate("text", x = 5.65, y = 0.3, label = "Claim Policies") +
geom_vline(data = duration_mean_Noclaim, aes(xintercept = mean_dur_log), linetype="solid", size=0.5) +
annotate("text", x = 3, y = 0.03, label = "Average Duration - ") +
annotate("text", x = 3, y = 0.01, label = "No Claim Policies") +
labs(title = "Density of Duration between Claim and No Claim Policies")
netSales_mean_claim <- df %>%
filter(Claim == "Yes",
`Net Sales` > 0) %>%
summarise(netSales_mean_claim = mean(`Net Sales`))
netSales_mean_Noclaim <- df %>%
filter(Claim == "No",
`Net Sales` > 0) %>%
summarise(netSales_mean_Noclaim = mean(`Net Sales`))
df %>%
filter(`Net Sales` > 0) %>%
ggplot(aes(`Net Sales`, color = Claim)) +
geom_density() +
geom_vline(data = netSales_mean_claim, aes(xintercept = netSales_mean_claim), linetype="dashed", size=0.5) +
annotate("text", x = 240, y = 0.03, label = "Average Sales - Claim Policies") +
geom_vline(data = netSales_mean_Noclaim, aes(xintercept = netSales_mean_Noclaim), linetype="solid", size=0.5) +
annotate("text", x = 200, y = 0.02, label = "Average Sales - No Claim Policies") +
labs(title = "Density of Sales between Claim and No Claim Policies")
comm_mean_claim <- df %>%
filter(Claim == "Yes") %>%
summarise(comm_mean_claim = mean(Commission))
comm_mean_Noclaim <- df %>%
filter(Claim == "No") %>%
summarise(comm_mean_Noclaim = mean(Commission))
df %>%
ggplot(aes(Commission, color = Claim)) +
geom_density() +
geom_vline(data = comm_mean_claim, aes(xintercept = comm_mean_claim), linetype="dashed", size=0.5) +
annotate("text", x = 80, y = 0.1, label = "Average Commission - Claim Policies") +
geom_vline(data = comm_mean_Noclaim, aes(xintercept = comm_mean_Noclaim), linetype="solid", size=0.5) +
annotate("text", x = 100, y = 0.15, label = "Average Commission - No Claim Policies") +
labs(title = "Density of Commission between Claim and No Claim Policies")
age_mean_claim <- df %>%
filter(Claim == "Yes") %>%
summarise(age_mean_claim = mean(Age))
age_mean_Noclaim <- df %>%
filter(Claim == "No") %>%
summarise(age_mean_Noclaim = mean(Age))
df %>%
ggplot(aes(Age, color = Claim)) +
geom_density() +
geom_vline(data = age_mean_claim, aes(xintercept = age_mean_claim), linetype="dashed", size=0.5) +
annotate("text", x = 20, y = 0.1, label = "Average Age - ") +
annotate("text", x = 20, y = 0.088, label = "Claim Policies") +
geom_vline(data = age_mean_Noclaim, aes(xintercept = age_mean_Noclaim), linetype="solid", size=0.5) +
annotate("text", x = 68, y = 0.15, label = "Average Age - No Claim Policies") +
labs(title = "Density of Age between Claim and No Claim Policies")
df_1 <- df %>%
select(-c(Gender, `Product Name`, Destination)) %>%
filter(`Net Sales` > 0) %>%
rename_with(~gsub(" ", "_", .x, fixed = TRUE))
set.seed(1234)
prop_split <- 0.6
grid_num <- 5
df_split <- initial_split(df_1, prop = prop_split, strata = Claim)
df_train <- training(df_split)
df_test <- testing(df_split)
df_folds <- vfold_cv(df_train, strata = Claim)
gen_recipe <- recipe(Claim ~ ., data = df_train)
tic("Time to Build Logistic Regression")
logit_recipe <- gen_recipe %>%
step_dummy(all_nominal_predictors()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
logit_spec <- logistic_reg(mixture = tune(), penalty = tune()) %>%
set_mode("classification") %>%
set_engine("glmnet")
logit_workflow <- workflow() %>%
add_recipe(logit_recipe) %>%
add_model(logit_spec)
logit_grid <- tidyr::crossing(penalty = c(1,2,3,4,5,6,7,8,9,10), mixture = c(0.05, 0.1, 0.2, 0.4, 0.6, 0.8, 1))
logit_tune <- tune_grid(logit_workflow,
resample = df_folds,
grid = logit_grid)
logit_fit <- logit_workflow %>%
finalize_workflow(select_best(logit_tune)) %>%
last_fit(df_split)
logit_pred <- logit_fit %>%
collect_predictions()
toc()
accuracy(logit_pred,
truth = Claim,
estimate = .pred_class)
conf_mat(logit_pred,
truth = Claim,
estimate = .pred_class)
autoplot(roc_curve(logit_pred,
truth = Claim,
estimate = .pred_No))
ggplot(df_1, aes(Claim)) +
geom_histogram(stat = "count")
tic("Time to Build Naive Bayes Classifier")
naive_recipe <- gen_recipe %>%
step_zv(all_predictors())
naive_spec <- naive_Bayes(smoothness = tune(), Laplace = tune()) %>%
set_mode("classification") %>%
set_engine("naivebayes")
naive_workflow <- workflow() %>%
add_recipe(naive_recipe) %>%
add_model(naive_spec)
naive_tune <- tune_grid(naive_workflow,
resample = df_folds,
grid = grid_num)
naive_fit <- naive_workflow %>%
finalize_workflow(select_best(naive_tune)) %>%
last_fit(df_split)
naive_pred <- naive_fit %>%
collect_predictions()
toc()
accuracy(naive_pred,
truth = Claim,
estimate = .pred_class)
conf_mat(naive_pred,
truth = Claim,
estimate = .pred_class)
autoplot(roc_curve(naive_pred,
truth = Claim,
estimate = .pred_No))
knitr::include_graphics("image/sorting hat.jpg")
options(htmltools.dir.version = FALSE)
packages <- c("captioner", "knitr")
for (p in packages){
if(!require (p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
knitr::opts_chunk$set(fig.retina = 3,
echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
out.width="80%")
library(captioner)
knitr::include_graphics("image/balance.jpg")
knitr::include_graphics("image/travel.jpg")
packages <- c('tidyverse', 'readr', 'skimr', 'tidymodels', 'discrim',
'naivebayes', 'glmnet', 'tictoc', 'vip', 'shapr',
'DALEXtra', 'funModeling', 'plotly', 'readxl', 'ggmosaic')
for(p in packages){
if(!require (p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
library('doParallel')
registerDoParallel() #as many physical cores as available.
df <- read_csv("data/travel insurance.csv") %>%
rename("Commission" = "Commision (in value)")
skim(df)
destination_state <- read_excel("data/Destination_Continent_Mapping.xlsx")
df <- df %>%
left_join(destination_state, by = c("Destination" = "Destination"))
ggplot(df, aes(Continent, fill = Claim)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Claim Proportion by Continents")
df %>%
group_by(Continent, Claim) %>%
summarise(count = n()) %>%
pivot_wider(names_from = Claim, names_prefix = "Claim_", values_from = count) %>%
mutate(total = Claim_No + Claim_Yes,
Claim_perc = Claim_Yes / total * 100)
ggplot(df, aes(x = `Product Name`, fill = Claim)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Claim Proportion by Product Name")
df_prod <- df %>%
group_by(`Product Name`) %>%
summarise(count = n(),
claim_ind = sum(Claim == "Yes")) %>%
mutate(claim_perc = claim_ind/count) %>%
arrange(desc(count)) %>%
mutate(claim_cum_perc = cumsum(count)/sum(count),
product_name_recoded = case_when(claim_cum_perc > 0.9 ~ "Others",
TRUE ~ as.character(`Product Name`))) %>%
select(-c("claim_perc", "claim_cum_perc", "claim_ind", "count")) %>%
ungroup()
df <- df %>%
left_join(df_prod, by = c("Product Name" = "Product Name"))
df %>%
filter(Duration < 1000) %>%
ggplot(aes(product_name_recoded, fill = Claim)) +
geom_bar(position = "fill") +
theme(axis.text.x = element_text(angle = 90)) +
labs(title = "Claim Proportion of Product Name Recoded")
duration_mean <- df %>%
summarise(duration_mean = mean(Duration))
ggplot(df, aes(Duration)) +
geom_density() +
geom_vline(data = duration_mean, aes(xintercept = duration_mean), linetype="dashed", size=0.5) +
annotate("text", x = 800, y = 0.025, label = paste0("Mean of Duration: ", round(duration_mean$duration_mean, 2))) +
labs(title = "Density of Duration")
duration_mean_claim <- df %>%
filter(Duration < 1000, Claim == "Yes") %>%
summarise(mean_dur = mean(Duration),
mean_dur_log = log(mean_dur + 1))
duration_mean_Noclaim <- df %>%
filter(Duration < 1000, Claim == "No") %>%
summarise(mean_dur = mean(Duration),
mean_dur_log = log(mean_dur + 1))
df %>%
filter(Duration < 1000) %>%
ggplot(aes(x = log(Duration + 1), color = Claim)) +
geom_density(alpha = 0.2) +
geom_vline(data = duration_mean_claim, aes(xintercept = mean_dur_log), linetype="dashed", size=0.5) +
annotate("text", x = 5.65, y = 0.32, label = "Average Duration - ") +
annotate("text", x = 5.65, y = 0.3, label = "Claim Policies") +
geom_vline(data = duration_mean_Noclaim, aes(xintercept = mean_dur_log), linetype="solid", size=0.5) +
annotate("text", x = 3, y = 0.03, label = "Average Duration - ") +
annotate("text", x = 3, y = 0.01, label = "No Claim Policies") +
labs(title = "Density of Duration between Claim and No Claim Policies")
netSales_mean_claim <- df %>%
filter(Claim == "Yes",
`Net Sales` > 0) %>%
summarise(netSales_mean_claim = mean(`Net Sales`))
netSales_mean_Noclaim <- df %>%
filter(Claim == "No",
`Net Sales` > 0) %>%
summarise(netSales_mean_Noclaim = mean(`Net Sales`))
df %>%
filter(`Net Sales` > 0) %>%
ggplot(aes(`Net Sales`, color = Claim)) +
geom_density() +
geom_vline(data = netSales_mean_claim, aes(xintercept = netSales_mean_claim), linetype="dashed", size=0.5) +
annotate("text", x = 240, y = 0.03, label = "Average Sales - Claim Policies") +
geom_vline(data = netSales_mean_Noclaim, aes(xintercept = netSales_mean_Noclaim), linetype="solid", size=0.5) +
annotate("text", x = 200, y = 0.02, label = "Average Sales - No Claim Policies") +
labs(title = "Density of Sales between Claim and No Claim Policies")
comm_mean_claim <- df %>%
filter(Claim == "Yes") %>%
summarise(comm_mean_claim = mean(Commission))
comm_mean_Noclaim <- df %>%
filter(Claim == "No") %>%
summarise(comm_mean_Noclaim = mean(Commission))
df %>%
ggplot(aes(Commission, color = Claim)) +
geom_density() +
geom_vline(data = comm_mean_claim, aes(xintercept = comm_mean_claim), linetype="dashed", size=0.5) +
annotate("text", x = 80, y = 0.1, label = "Average Commission - Claim Policies") +
geom_vline(data = comm_mean_Noclaim, aes(xintercept = comm_mean_Noclaim), linetype="solid", size=0.5) +
annotate("text", x = 100, y = 0.15, label = "Average Commission - No Claim Policies") +
labs(title = "Density of Commission between Claim and No Claim Policies")
age_mean_claim <- df %>%
filter(Claim == "Yes") %>%
summarise(age_mean_claim = mean(Age))
age_mean_Noclaim <- df %>%
filter(Claim == "No") %>%
summarise(age_mean_Noclaim = mean(Age))
df %>%
ggplot(aes(Age, color = Claim)) +
geom_density() +
geom_vline(data = age_mean_claim, aes(xintercept = age_mean_claim), linetype="dashed", size=0.5) +
annotate("text", x = 20, y = 0.1, label = "Average Age - ") +
annotate("text", x = 20, y = 0.088, label = "Claim Policies") +
geom_vline(data = age_mean_Noclaim, aes(xintercept = age_mean_Noclaim), linetype="solid", size=0.5) +
annotate("text", x = 68, y = 0.15, label = "Average Age - No Claim Policies") +
labs(title = "Density of Age between Claim and No Claim Policies")
View(df)
df %>%
filter(Age > 100)
df %>%
filter(Age > 100) %>%
tally()
