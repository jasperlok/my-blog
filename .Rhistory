facet_wrap(~DrivGender)
ggplot(df, aes(DrivAge, log(PremTot))) +
geom_point() +
facet_wrap(~DrivGender)
ggplot(df, aes(DrivAge, log(PremTot)), color = DrivAge) +
geom_point()
#  facet_wrap(~DrivGender)
ggplot(df, aes(DrivAge, log(PremTot), color = DrivAge)) +
geom_point()
#  facet_wrap(~DrivGender)
ggplot(df, aes(DrivAge, log(PremTot), color = DrivGender)) +
geom_point()
#  facet_wrap(~DrivGender)
ggplotly(ggplot(df, aes(DrivAge, log(PremTot), color = DrivGender)) +
geom_point()
facet_wrap(~DrivGender))
ggplotly(ggplot(df, aes(DrivAge, log(PremTot))) +
geom_point() +
facet_wrap(~DrivGender))
package <- c('CASdatasets', 'tidyverse', 'skimr', 'funModeling', 'ggplot2', 'plotly')
for (p in package){
if(!require (p, character.only = TRUE)){
install(p)
}
library(p, character.only = TRUE)
}
ggplotly(ggplot(df, aes(DrivAge, log(PremTot))) +
geom_point() +
facet_wrap(~DrivGender))
ggplotly(ggplot(df, aes(DrivAge, log(PremTot))) +
geom_point() +
facet_wrap(~DrivGender))
ggplot(df, aes(DrivAge, log(PremTot))) +
geom_point() +
facet_wrap(~DrivGender)
ggplot(df, aes(BonusMalus, log(PremTot))) +
geom_point()
ggplot(df, aes(BonusMalus, PremTot)) +
geom_point()
ggplot(df, aes(VehAge, PremTot)) +
geom_point()
ggplot(df, aes(VehAge, log(PremTot))) +
geom_point()
ggplot(df, aes(VehAge, PremTot)) +
geom_point()
package <- c('CASdatasets', 'tidyverse', 'skimr', 'funModeling', 'ggplot2', 'plotly', 'ggstatsplot')
for (p in package){
if(!require (p, character.only = TRUE)){
install(p)
}
library(p, character.only = TRUE)
}
ggbetweenstats(df, x = Area, y = PremTotal, pairwise.comparisons = TRUE, pairwise.display = "significant")
ggbetweenstats(df, x = Area, y = PremTot, pairwise.comparisons = TRUE, pairwise.display = "significant")
ggbetweenstats(df, x = Area, y = PremTot, pairwise.comparisons = TRUE) #, pairwise.display = "significant")
num_list <- list(df %>% select_if(is.numeric) %>% names())
for (i in num_list){
print(
ggplot(df, aes(x = get(i), y = log(PremTot))) +
geom_point()
)
}
#ggplot(df, aes(DrivAge, log(PremTot))) +
#  geom_point()
num_list <- list(df %>% select_if(is.numeric) %>% names())
for (i in num_list){
print(
ggplot(df, aes(x = get(i), y = log(PremTot))) +
geom_point()
)
}
i
num_list <- list(df %>%
select_if(is.numeric) %>%
select_if(-starts_with("Prem"))
names())
num_list <- list(df %>%
select_if(is.numeric) %>%
select_if(-starts_with("Prem")) %>%
names())
num_list <- list(df %>%
select_if(is.numeric) %>%
dplyr::select(-starts_with("Prem")) %>%
names())
for (i in num_list){
print(
ggplot(df, aes(x = get(i), y = log(PremTot))) +
geom_point()
)
}
num_list <- list(df %>%
select_if(is.numeric) %>%
dplyr::select(-starts_with("Prem")) %>%
names())
for (i in num_list){
print(ggplot(df, aes(x = get(i), y = log(PremTot))) +
geom_point())
}
i
#num_list <- list(df %>%
#                   select_if(is.numeric) %>%
#                   dplyr::select(-starts_with("Prem")) %>%
#                   names())
num_list <- c("DrivAge", "BonusMalus", "LicenceNb", "VehAge")
for (i in num_list){
print(ggplot(df, aes(x = get(i), y = log(PremTot))) +
geom_point())
}
#num_list <- list(df %>%
#                   select_if(is.numeric) %>%
#                   dplyr::select(-starts_with("Prem")) %>%
#                   names())
num_list <- c("DrivAge", "BonusMalus", "LicenceNb", "VehAge")
for (i in num_list){
print(ggplot(df, aes(x = get(i), y = log(PremTot))) +
geom_point() +
xlabs(i)
)
}
#num_list <- list(df %>%
#                   select_if(is.numeric) %>%
#                   dplyr::select(-starts_with("Prem")) %>%
#                   names())
num_list <- c("DrivAge", "BonusMalus", "LicenceNb", "VehAge")
for (i in num_list){
print(ggplot(df, aes(x = get(i), y = log(PremTot))) +
geom_point() +
xlab(i)
)
}
#num_list <- list(df %>%
#                   select_if(is.numeric) %>%
#                   dplyr::select(-starts_with("Prem")) %>%
#                   names())
num_list <- c("Year", "DrivAge", "BonusMalus", "LicenceNb", "VehAge")
for (i in num_list){
print(ggplot(df, aes(x = get(i), y = log(PremTot))) +
geom_point() +
xlab(i)
)
}
df_1 <- df %>%
mutate(Year = factor(Year),
LicenceNb = factor(LicenceNb))
ggplot(df_1, aes(BonusMalus, PremTot)) +
geom_point()
cat_list <- list(df_1 %>%
select_if(is.character) %>%
names())
for (i in cat_list){
print(ggplot(df, aes(x = get(i), y = log(PremTot))) +
geom_boxplot() +
xlab(i)
)
}
View(cat_list)
cat_list <- list(df_1 %>%
select_if(is.character))
View(cat_list)
cat_list <- df_1 %>%
select_if(is.character) %>%
names()
View(df_1)
cat_list <- df_1 %>%
select_if(is.factor) %>%
names()
cat_list
for (i in cat_list){
print(ggplot(df, aes(x = get(i), y = log(PremTot))) +
geom_boxplot() +
xlab(i)
)
}
for (i in cat_list){
print(ggplot(df, aes(x = get(i), y = PremTot)) +
geom_boxplot() +
xlab(i)
)
}
for (i in cat_list){
print(ggplot(df, aes(x = get(i), y = log(PremTot))) +
geom_boxplot() +
xlab(i)
)
}
knitr::include_graphics("image/SAS Talk.png")
knitr::include_graphics("image/SAS Talk.jpg")
library(distill)
create_blog("SAS Sharing 22 Apr 2021")
knitr::include_graphics("image/cup_stack.jpg")
knitr::include_graphics("image/cup_stack.jpg")
knitr::include_graphics("image/logo_stacks.png")
options(htmltools.dir.version = FALSE)
packages <- c("captioner", "knitr", "tidyverse", "tidymodels", "stacks")
for (p in packages){
if(!require (p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
knitr::opts_chunk$set(fig.retina = 3,
echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
out.width="70%")
options(htmltools.dir.version = FALSE)
packages <- c("captioner", "knitr", "tidyverse", "tidymodels", "stacks")
for (p in packages){
if(!require (p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
knitr::opts_chunk$set(fig.retina = 3,
echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
out.width="70%")
library(captioner)
knitr::include_graphics("image/bricks stack.png")
knitr::include_graphics("image/bricks stack.jpg")
knitr::include_graphics("image/hooray.png")
knitr::include_graphics("image/hooray.jpg")
knitr::include_graphics("image/model stacking steps.png")
options(htmltools.dir.version = FALSE)
packages <- c("captioner", "knitr", "tidyverse", "tidymodels", "stacks")
for (p in packages){
if(!require (p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
knitr::opts_chunk$set(fig.retina = 3,
echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
out.width="70%")
library(captioner)
knitr::include_graphics("image/cup_stack.jpg")
knitr::include_graphics("image/Graph on Different Machine Learning.png")
knitr::include_graphics("image/model stacking steps.png")
knitr::include_graphics("image/bricks stack.jpg")
knitr::include_graphics("image/logo_stacks.png")
knitr::include_graphics("image/hooray.jpg")
packages <- c("tidyverse", "tidymodels", "stacks")
for (p in packages){
if(!require (p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
# Define the random seeds for reproducibility
set.seed(123)
# Proportion between training and testing dataset
prop_train_test <- 0.6
# Define the model performance metrics we would like to output later
model_metrics <- metric_set(rmse, rsq, mase)
# The number of grid to be used in the analysis later
grid_num <- 10
ctrl_grid <- control_stack_grid()
ctrl_res <- control_stack_resamples()
data <- read_csv("data/data_eda_actLoss_3.csv") %>%
dplyr::select(-c(ClaimNumber,
num_week_paid_ult)) %>%
dplyr::select(-starts_with(c("acc", "report"))) %>%
filter(Gender != "U") %>%
drop_na() %>%
sample_frac(0.1)
# Dataset with pre-text mining during EDA stage
df_split <- initial_split(df,
prop = prop_train_test,
strata = init_ult_diff)
options(htmltools.dir.version = FALSE)
packages <- c("captioner", "knitr", "tidyverse", "tidymodels", "stacks")
for (p in packages){
if(!require (p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
knitr::opts_chunk$set(fig.retina = 3,
echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
out.width="70%")
library(captioner)
knitr::include_graphics("image/cup_stack.jpg")
knitr::include_graphics("image/Graph on Different Machine Learning.png")
knitr::include_graphics("image/model stacking steps.png")
knitr::include_graphics("image/bricks stack.jpg")
knitr::include_graphics("image/logo_stacks.png")
knitr::include_graphics("image/hooray.jpg")
packages <- c("tidyverse", "tidymodels", "stacks")
for (p in packages){
if(!require (p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
# Define the random seeds for reproducibility
set.seed(123)
# Proportion between training and testing dataset
prop_train_test <- 0.6
# Define the model performance metrics we would like to output later
model_metrics <- metric_set(rmse, rsq, mase)
# The number of grid to be used in the analysis later
grid_num <- 10
ctrl_grid <- control_stack_grid()
ctrl_res <- control_stack_resamples()
df <- read_csv("data/data_eda_actLoss_3.csv") %>%
dplyr::select(-c(ClaimNumber,
num_week_paid_ult)) %>%
dplyr::select(-starts_with(c("acc", "report"))) %>%
filter(Gender != "U") %>%
drop_na() %>%
sample_frac(0.1)
# Dataset with pre-text mining during EDA stage
df_split <- initial_split(df,
prop = prop_train_test,
strata = init_ult_diff)
df_train <- training(df_split)
df_test <- testing(df_split)
df_folds <- vfold_cv(df_train, strata = init_ult_diff)
df_folds
gen_recipe <- recipe(init_ult_diff ~ ., data = df_train) %>%
step_date(c(DateTimeOfAccident, DateReported)) %>%
step_mutate(DateTimeOfAccident_hr = lubridate::hour(DateTimeOfAccident),
DateTimeOfAccident_hr = factor(DateTimeOfAccident_hr, order = TRUE),
DateTimeOfAccident_year = factor(DateTimeOfAccident_year, order = TRUE),
DateReported_year = factor(DateReported_year, order = TRUE)) %>%
update_role(c(DateTimeOfAccident, DateReported), new_role = "id") %>% # update the roles of original date variables to "id"
prep()
ranger_spec <-
rand_forest(mtry = tune(),
min_n = tune(),
trees = tune()) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity")
ranger_workflow <-
workflow() %>%
add_recipe(gen_recipe) %>%
add_model(ranger_spec)
set.seed(51107)
ranger_tune <-
tune_grid(ranger_workflow,
resamples = df_folds,
grid = grid_num,
control = ctrl_grid)
xgboost_recipe <- gen_recipe %>%
step_dummy(all_nominal())
xgboost_spec <-
boost_tree(trees = tune(),
min_n = tune(),
tree_depth = tune(),
learn_rate = tune(),
loss_reduction = tune(),
sample_size = tune()) %>%
set_mode("regression") %>%
set_engine("xgboost")
xgboost_workflow <-
workflow() %>%
add_recipe(xgboost_recipe) %>%
add_model(xgboost_spec)
set.seed(12071)
xgboost_tune <-
tune_grid(xgboost_workflow,
resamples = df_folds,
grid = num_grid,
control = ctrl_grid)
xgboost_recipe <- gen_recipe %>%
step_dummy(all_nominal())
xgboost_spec <-
boost_tree(trees = tune(),
min_n = tune(),
tree_depth = tune(),
learn_rate = tune(),
loss_reduction = tune(),
sample_size = tune()) %>%
set_mode("regression") %>%
set_engine("xgboost")
xgboost_workflow <-
workflow() %>%
add_recipe(xgboost_recipe) %>%
add_model(xgboost_spec)
set.seed(12071)
xgboost_tune <-
tune_grid(xgboost_workflow,
resamples = df_folds,
grid = grid_num,
control = ctrl_grid)
earth_recipe <- gen_recipe %>%
step_novel(all_nominal(), -all_outcomes()) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors())
earth_spec <-
mars(num_terms = tune(),
prod_degree = tune(),
prune_method = "none") %>%
set_mode("regression") %>%
set_engine("earth")
earth_workflow <-
workflow() %>%
add_recipe(earth_recipe) %>%
add_model(earth_spec)
earth_grid <- tidyr::crossing(num_terms = 2 * (1:6), prod_degree = 1:2)
earth_tune <-
tune_grid(earth_workflow,
resamples = df_folds,
grid = grid_num,
control = ctrl_grid)
options(htmltools.dir.version = FALSE)
packages <- c("captioner", "knitr", "tidyverse", "tidymodels", "stacks")
for (p in packages){
if(!require (p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
knitr::opts_chunk$set(fig.retina = 3,
echo = TRUE,
eval = TRUE,
message = FALSE,
warning = FALSE,
out.width="70%")
library(captioner)
knitr::include_graphics("image/cup_stack.jpg")
knitr::include_graphics("image/Graph on Different Machine Learning.png")
knitr::include_graphics("image/model stacking steps.png")
knitr::include_graphics("image/bricks stack.jpg")
knitr::include_graphics("image/logo_stacks.png")
knitr::include_graphics("image/hooray.jpg")
packages <- c("tidyverse", "tidymodels", "stacks")
for (p in packages){
if(!require (p, character.only = T)){
install.packages(p)
}
library(p, character.only = T)
}
# Define the random seeds for reproducibility
set.seed(123)
# Proportion between training and testing dataset
prop_train_test <- 0.6
# Define the model performance metrics we would like to output later
model_metrics <- metric_set(rmse, rsq, mase)
# The number of grid to be used in the analysis later
grid_num <- 5
ctrl_grid <- control_stack_grid()
ctrl_res <- control_stack_resamples()
df <- read_csv("data/data_eda_actLoss_3.csv") %>%
dplyr::select(-c(ClaimNumber,
num_week_paid_ult)) %>%
dplyr::select(-starts_with(c("acc", "report"))) %>%
filter(Gender != "U") %>%
drop_na() %>%
sample_frac(0.1)
# Dataset with pre-text mining during EDA stage
df_split <- initial_split(df,
prop = prop_train_test,
strata = init_ult_diff)
df_train <- training(df_split)
df_test <- testing(df_split)
df_folds <- vfold_cv(df_train, strata = init_ult_diff)
df_folds
gen_recipe <- recipe(init_ult_diff ~ ., data = df_train) %>%
step_date(c(DateTimeOfAccident, DateReported)) %>%
step_mutate(DateTimeOfAccident_hr = lubridate::hour(DateTimeOfAccident),
DateTimeOfAccident_hr = factor(DateTimeOfAccident_hr, order = TRUE),
DateTimeOfAccident_year = factor(DateTimeOfAccident_year, order = TRUE),
DateReported_year = factor(DateReported_year, order = TRUE)) %>%
update_role(c(DateTimeOfAccident, DateReported), new_role = "id") %>% # update the roles of original date variables to "id"
prep()
ranger_spec <-
rand_forest(mtry = tune(),
min_n = tune(),
trees = tune()) %>%
set_mode("regression") %>%
set_engine("ranger", importance = "impurity")
ranger_workflow <-
workflow() %>%
add_recipe(gen_recipe) %>%
add_model(ranger_spec)
set.seed(51107)
ranger_tune <-
tune_grid(ranger_workflow,
resamples = df_folds,
grid = grid_num,
control = ctrl_grid)
xgboost_recipe <- gen_recipe %>%
step_dummy(all_nominal())
xgboost_spec <-
boost_tree(trees = tune(),
min_n = tune(),
tree_depth = tune(),
learn_rate = tune(),
loss_reduction = tune(),
sample_size = tune()) %>%
set_mode("regression") %>%
set_engine("xgboost")
xgboost_workflow <-
workflow() %>%
add_recipe(xgboost_recipe) %>%
add_model(xgboost_spec)
set.seed(12071)
xgboost_tune <-
tune_grid(xgboost_workflow,
resamples = df_folds,
grid = grid_num,
control = ctrl_grid)
